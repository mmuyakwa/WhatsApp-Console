name: Security Scan

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Läuft jeden Montag um 2 Uhr UTC
    - cron: '0 2 * * 1'

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Install and run gosec Security Scanner
      run: |
        # Install gosec using go install (more reliable)
        echo "🔧 Installing gosec..."
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        
        # Verify installation
        if ! $(go env GOPATH)/bin/gosec --help > /dev/null 2>&1; then
          echo "❌ gosec installation failed, creating empty SARIF file"
          echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "gosec"}}, "results": []}]}' > gosec-results.sarif
        else
          echo "✅ gosec installed successfully"
          echo "🔍 Running gosec scan..."
          
          # Run gosec scan with better error handling
          if $(go env GOPATH)/bin/gosec -fmt sarif -out gosec-results.sarif ./...; then
            echo "✅ gosec scan completed successfully"
          else
            echo "⚠️ gosec scan completed with warnings, but SARIF file was created"
          fi
          
          # Verify SARIF file exists and is valid
          if [ ! -f "gosec-results.sarif" ]; then
            echo "❌ SARIF file not created, creating empty one"
            echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "gosec"}}, "results": []}]}' > gosec-results.sarif
          fi
        fi
        
        echo "📄 SARIF file size: $(wc -c < gosec-results.sarif) bytes"
      continue-on-error: true
    
    - name: Upload gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('gosec-results.sarif') != ''
      with:
        sarif_file: 'gosec-results.sarif'
    
    - name: Build for multiple platforms
      run: |
        mkdir -p dist
        
        # Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/whatsapp-console-linux-amd64 .
        
        # Weitere Builds...
